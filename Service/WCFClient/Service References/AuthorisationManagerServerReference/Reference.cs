//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DevelopmentInProgress.AuthorisationManager.WCFClient.AuthorisationManagerServerReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AuthorisationManagerServerReference.IAuthorisationManagerServer")]
    public interface IAuthorisationManagerServer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerServer/GetAuthorisation", ReplyAction="http://tempuri.org/IAuthorisationManagerServer/GetAuthorisationResponse")]
        DevelopmentInProgress.DipCore.Service.ServiceResponse<DevelopmentInProgress.DipSecure.Authorisation> GetAuthorisation();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerServer/GetAuthorisation", ReplyAction="http://tempuri.org/IAuthorisationManagerServer/GetAuthorisationResponse")]
        System.Threading.Tasks.Task<DevelopmentInProgress.DipCore.Service.ServiceResponse<DevelopmentInProgress.DipSecure.Authorisation>> GetAuthorisationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerServer/SaveActivity", ReplyAction="http://tempuri.org/IAuthorisationManagerServer/SaveActivityResponse")]
        DevelopmentInProgress.DipCore.Service.ServiceResponse<DevelopmentInProgress.DipSecure.Activity> SaveActivity(DevelopmentInProgress.DipSecure.Activity activity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerServer/SaveActivity", ReplyAction="http://tempuri.org/IAuthorisationManagerServer/SaveActivityResponse")]
        System.Threading.Tasks.Task<DevelopmentInProgress.DipCore.Service.ServiceResponse<DevelopmentInProgress.DipSecure.Activity>> SaveActivityAsync(DevelopmentInProgress.DipSecure.Activity activity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerServer/SaveRole", ReplyAction="http://tempuri.org/IAuthorisationManagerServer/SaveRoleResponse")]
        DevelopmentInProgress.DipCore.Service.ServiceResponse<DevelopmentInProgress.DipSecure.Role> SaveRole(DevelopmentInProgress.DipSecure.Role role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerServer/SaveRole", ReplyAction="http://tempuri.org/IAuthorisationManagerServer/SaveRoleResponse")]
        System.Threading.Tasks.Task<DevelopmentInProgress.DipCore.Service.ServiceResponse<DevelopmentInProgress.DipSecure.Role>> SaveRoleAsync(DevelopmentInProgress.DipSecure.Role role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerServer/SaveUserAuthorisation", ReplyAction="http://tempuri.org/IAuthorisationManagerServer/SaveUserAuthorisationResponse")]
        DevelopmentInProgress.DipCore.Service.ServiceResponse<DevelopmentInProgress.DipSecure.UserAuthorisation> SaveUserAuthorisation(DevelopmentInProgress.DipSecure.UserAuthorisation userAuthorisation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerServer/SaveUserAuthorisation", ReplyAction="http://tempuri.org/IAuthorisationManagerServer/SaveUserAuthorisationResponse")]
        System.Threading.Tasks.Task<DevelopmentInProgress.DipCore.Service.ServiceResponse<DevelopmentInProgress.DipSecure.UserAuthorisation>> SaveUserAuthorisationAsync(DevelopmentInProgress.DipSecure.UserAuthorisation userAuthorisation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerServer/DeleteActivity", ReplyAction="http://tempuri.org/IAuthorisationManagerServer/DeleteActivityResponse")]
        DevelopmentInProgress.DipCore.Service.ServiceResponse<bool> DeleteActivity(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerServer/DeleteActivity", ReplyAction="http://tempuri.org/IAuthorisationManagerServer/DeleteActivityResponse")]
        System.Threading.Tasks.Task<DevelopmentInProgress.DipCore.Service.ServiceResponse<bool>> DeleteActivityAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerServer/DeleteRole", ReplyAction="http://tempuri.org/IAuthorisationManagerServer/DeleteRoleResponse")]
        DevelopmentInProgress.DipCore.Service.ServiceResponse<bool> DeleteRole(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerServer/DeleteRole", ReplyAction="http://tempuri.org/IAuthorisationManagerServer/DeleteRoleResponse")]
        System.Threading.Tasks.Task<DevelopmentInProgress.DipCore.Service.ServiceResponse<bool>> DeleteRoleAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerServer/DeleteUserAuthorisation", ReplyAction="http://tempuri.org/IAuthorisationManagerServer/DeleteUserAuthorisationResponse")]
        DevelopmentInProgress.DipCore.Service.ServiceResponse<bool> DeleteUserAuthorisation(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerServer/DeleteUserAuthorisation", ReplyAction="http://tempuri.org/IAuthorisationManagerServer/DeleteUserAuthorisationResponse")]
        System.Threading.Tasks.Task<DevelopmentInProgress.DipCore.Service.ServiceResponse<bool>> DeleteUserAuthorisationAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerServer/RemoveActivityFromActivity", ReplyAction="http://tempuri.org/IAuthorisationManagerServer/RemoveActivityFromActivityResponse" +
            "")]
        DevelopmentInProgress.DipCore.Service.ServiceResponse<bool> RemoveActivityFromActivity(int activityId, int parentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerServer/RemoveActivityFromActivity", ReplyAction="http://tempuri.org/IAuthorisationManagerServer/RemoveActivityFromActivityResponse" +
            "")]
        System.Threading.Tasks.Task<DevelopmentInProgress.DipCore.Service.ServiceResponse<bool>> RemoveActivityFromActivityAsync(int activityId, int parentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerServer/RemoveActivityFromRole", ReplyAction="http://tempuri.org/IAuthorisationManagerServer/RemoveActivityFromRoleResponse")]
        DevelopmentInProgress.DipCore.Service.ServiceResponse<bool> RemoveActivityFromRole(int activityId, int roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerServer/RemoveActivityFromRole", ReplyAction="http://tempuri.org/IAuthorisationManagerServer/RemoveActivityFromRoleResponse")]
        System.Threading.Tasks.Task<DevelopmentInProgress.DipCore.Service.ServiceResponse<bool>> RemoveActivityFromRoleAsync(int activityId, int roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerServer/RemoveRoleFromRole", ReplyAction="http://tempuri.org/IAuthorisationManagerServer/RemoveRoleFromRoleResponse")]
        DevelopmentInProgress.DipCore.Service.ServiceResponse<bool> RemoveRoleFromRole(int roleId, int parentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerServer/RemoveRoleFromRole", ReplyAction="http://tempuri.org/IAuthorisationManagerServer/RemoveRoleFromRoleResponse")]
        System.Threading.Tasks.Task<DevelopmentInProgress.DipCore.Service.ServiceResponse<bool>> RemoveRoleFromRoleAsync(int roleId, int parentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerServer/RemoveRoleFromUser", ReplyAction="http://tempuri.org/IAuthorisationManagerServer/RemoveRoleFromUserResponse")]
        DevelopmentInProgress.DipCore.Service.ServiceResponse<bool> RemoveRoleFromUser(int roleId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerServer/RemoveRoleFromUser", ReplyAction="http://tempuri.org/IAuthorisationManagerServer/RemoveRoleFromUserResponse")]
        System.Threading.Tasks.Task<DevelopmentInProgress.DipCore.Service.ServiceResponse<bool>> RemoveRoleFromUserAsync(int roleId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerServer/AddActivityToRole", ReplyAction="http://tempuri.org/IAuthorisationManagerServer/AddActivityToRoleResponse")]
        DevelopmentInProgress.DipCore.Service.ServiceResponse<bool> AddActivityToRole(int roleId, int activityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerServer/AddActivityToRole", ReplyAction="http://tempuri.org/IAuthorisationManagerServer/AddActivityToRoleResponse")]
        System.Threading.Tasks.Task<DevelopmentInProgress.DipCore.Service.ServiceResponse<bool>> AddActivityToRoleAsync(int roleId, int activityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerServer/AddActivityToActivity", ReplyAction="http://tempuri.org/IAuthorisationManagerServer/AddActivityToActivityResponse")]
        DevelopmentInProgress.DipCore.Service.ServiceResponse<bool> AddActivityToActivity(int parentActivityId, int activityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerServer/AddActivityToActivity", ReplyAction="http://tempuri.org/IAuthorisationManagerServer/AddActivityToActivityResponse")]
        System.Threading.Tasks.Task<DevelopmentInProgress.DipCore.Service.ServiceResponse<bool>> AddActivityToActivityAsync(int parentActivityId, int activityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerServer/AddRoleToUser", ReplyAction="http://tempuri.org/IAuthorisationManagerServer/AddRoleToUserResponse")]
        DevelopmentInProgress.DipCore.Service.ServiceResponse<bool> AddRoleToUser(int userId, int roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerServer/AddRoleToUser", ReplyAction="http://tempuri.org/IAuthorisationManagerServer/AddRoleToUserResponse")]
        System.Threading.Tasks.Task<DevelopmentInProgress.DipCore.Service.ServiceResponse<bool>> AddRoleToUserAsync(int userId, int roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerServer/AddRoleToRole", ReplyAction="http://tempuri.org/IAuthorisationManagerServer/AddRoleToRoleResponse")]
        DevelopmentInProgress.DipCore.Service.ServiceResponse<bool> AddRoleToRole(int parentRoleId, int roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerServer/AddRoleToRole", ReplyAction="http://tempuri.org/IAuthorisationManagerServer/AddRoleToRoleResponse")]
        System.Threading.Tasks.Task<DevelopmentInProgress.DipCore.Service.ServiceResponse<bool>> AddRoleToRoleAsync(int parentRoleId, int roleId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuthorisationManagerServerChannel : DevelopmentInProgress.AuthorisationManager.WCFClient.AuthorisationManagerServerReference.IAuthorisationManagerServer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthorisationManagerServerClient : System.ServiceModel.ClientBase<DevelopmentInProgress.AuthorisationManager.WCFClient.AuthorisationManagerServerReference.IAuthorisationManagerServer>, DevelopmentInProgress.AuthorisationManager.WCFClient.AuthorisationManagerServerReference.IAuthorisationManagerServer {
        
        public AuthorisationManagerServerClient() {
        }
        
        public AuthorisationManagerServerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuthorisationManagerServerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthorisationManagerServerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthorisationManagerServerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }

        public DevelopmentInProgress.DipCore.Service.ServiceResponse<DevelopmentInProgress.DipSecure.Authorisation> GetAuthorisation()
        {
            return base.Channel.GetAuthorisation();
        }

        public System.Threading.Tasks.Task<DevelopmentInProgress.DipCore.Service.ServiceResponse<DevelopmentInProgress.DipSecure.Authorisation>> GetAuthorisationAsync()
        {
            return base.Channel.GetAuthorisationAsync();
        }
        
        public DevelopmentInProgress.DipCore.Service.ServiceResponse<DevelopmentInProgress.DipSecure.Activity> SaveActivity(DevelopmentInProgress.DipSecure.Activity activity) {
            return base.Channel.SaveActivity(activity);
        }
        
        public System.Threading.Tasks.Task<DevelopmentInProgress.DipCore.Service.ServiceResponse<DevelopmentInProgress.DipSecure.Activity>> SaveActivityAsync(DevelopmentInProgress.DipSecure.Activity activity) {
            return base.Channel.SaveActivityAsync(activity);
        }
        
        public DevelopmentInProgress.DipCore.Service.ServiceResponse<DevelopmentInProgress.DipSecure.Role> SaveRole(DevelopmentInProgress.DipSecure.Role role) {
            return base.Channel.SaveRole(role);
        }
        
        public System.Threading.Tasks.Task<DevelopmentInProgress.DipCore.Service.ServiceResponse<DevelopmentInProgress.DipSecure.Role>> SaveRoleAsync(DevelopmentInProgress.DipSecure.Role role) {
            return base.Channel.SaveRoleAsync(role);
        }
        
        public DevelopmentInProgress.DipCore.Service.ServiceResponse<DevelopmentInProgress.DipSecure.UserAuthorisation> SaveUserAuthorisation(DevelopmentInProgress.DipSecure.UserAuthorisation userAuthorisation) {
            return base.Channel.SaveUserAuthorisation(userAuthorisation);
        }
        
        public System.Threading.Tasks.Task<DevelopmentInProgress.DipCore.Service.ServiceResponse<DevelopmentInProgress.DipSecure.UserAuthorisation>> SaveUserAuthorisationAsync(DevelopmentInProgress.DipSecure.UserAuthorisation userAuthorisation) {
            return base.Channel.SaveUserAuthorisationAsync(userAuthorisation);
        }
        
        public DevelopmentInProgress.DipCore.Service.ServiceResponse<bool> DeleteActivity(int id) {
            return base.Channel.DeleteActivity(id);
        }
        
        public System.Threading.Tasks.Task<DevelopmentInProgress.DipCore.Service.ServiceResponse<bool>> DeleteActivityAsync(int id) {
            return base.Channel.DeleteActivityAsync(id);
        }
        
        public DevelopmentInProgress.DipCore.Service.ServiceResponse<bool> DeleteRole(int id) {
            return base.Channel.DeleteRole(id);
        }
        
        public System.Threading.Tasks.Task<DevelopmentInProgress.DipCore.Service.ServiceResponse<bool>> DeleteRoleAsync(int id) {
            return base.Channel.DeleteRoleAsync(id);
        }
        
        public DevelopmentInProgress.DipCore.Service.ServiceResponse<bool> DeleteUserAuthorisation(int id) {
            return base.Channel.DeleteUserAuthorisation(id);
        }
        
        public System.Threading.Tasks.Task<DevelopmentInProgress.DipCore.Service.ServiceResponse<bool>> DeleteUserAuthorisationAsync(int id) {
            return base.Channel.DeleteUserAuthorisationAsync(id);
        }
        
        public DevelopmentInProgress.DipCore.Service.ServiceResponse<bool> RemoveActivityFromActivity(int activityId, int parentId) {
            return base.Channel.RemoveActivityFromActivity(activityId, parentId);
        }
        
        public System.Threading.Tasks.Task<DevelopmentInProgress.DipCore.Service.ServiceResponse<bool>> RemoveActivityFromActivityAsync(int activityId, int parentId) {
            return base.Channel.RemoveActivityFromActivityAsync(activityId, parentId);
        }
        
        public DevelopmentInProgress.DipCore.Service.ServiceResponse<bool> RemoveActivityFromRole(int activityId, int roleId) {
            return base.Channel.RemoveActivityFromRole(activityId, roleId);
        }
        
        public System.Threading.Tasks.Task<DevelopmentInProgress.DipCore.Service.ServiceResponse<bool>> RemoveActivityFromRoleAsync(int activityId, int roleId) {
            return base.Channel.RemoveActivityFromRoleAsync(activityId, roleId);
        }
        
        public DevelopmentInProgress.DipCore.Service.ServiceResponse<bool> RemoveRoleFromRole(int roleId, int parentId) {
            return base.Channel.RemoveRoleFromRole(roleId, parentId);
        }
        
        public System.Threading.Tasks.Task<DevelopmentInProgress.DipCore.Service.ServiceResponse<bool>> RemoveRoleFromRoleAsync(int roleId, int parentId) {
            return base.Channel.RemoveRoleFromRoleAsync(roleId, parentId);
        }
        
        public DevelopmentInProgress.DipCore.Service.ServiceResponse<bool> RemoveRoleFromUser(int roleId, int userId) {
            return base.Channel.RemoveRoleFromUser(roleId, userId);
        }
        
        public System.Threading.Tasks.Task<DevelopmentInProgress.DipCore.Service.ServiceResponse<bool>> RemoveRoleFromUserAsync(int roleId, int userId) {
            return base.Channel.RemoveRoleFromUserAsync(roleId, userId);
        }
        
        public DevelopmentInProgress.DipCore.Service.ServiceResponse<bool> AddActivityToRole(int roleId, int activityId) {
            return base.Channel.AddActivityToRole(roleId, activityId);
        }
        
        public System.Threading.Tasks.Task<DevelopmentInProgress.DipCore.Service.ServiceResponse<bool>> AddActivityToRoleAsync(int roleId, int activityId) {
            return base.Channel.AddActivityToRoleAsync(roleId, activityId);
        }
        
        public DevelopmentInProgress.DipCore.Service.ServiceResponse<bool> AddActivityToActivity(int parentActivityId, int activityId) {
            return base.Channel.AddActivityToActivity(parentActivityId, activityId);
        }
        
        public System.Threading.Tasks.Task<DevelopmentInProgress.DipCore.Service.ServiceResponse<bool>> AddActivityToActivityAsync(int parentActivityId, int activityId) {
            return base.Channel.AddActivityToActivityAsync(parentActivityId, activityId);
        }
        
        public DevelopmentInProgress.DipCore.Service.ServiceResponse<bool> AddRoleToUser(int userId, int roleId) {
            return base.Channel.AddRoleToUser(userId, roleId);
        }
        
        public System.Threading.Tasks.Task<DevelopmentInProgress.DipCore.Service.ServiceResponse<bool>> AddRoleToUserAsync(int userId, int roleId) {
            return base.Channel.AddRoleToUserAsync(userId, roleId);
        }
        
        public DevelopmentInProgress.DipCore.Service.ServiceResponse<bool> AddRoleToRole(int parentRoleId, int roleId) {
            return base.Channel.AddRoleToRole(parentRoleId, roleId);
        }
        
        public System.Threading.Tasks.Task<DevelopmentInProgress.DipCore.Service.ServiceResponse<bool>> AddRoleToRoleAsync(int parentRoleId, int roleId) {
            return base.Channel.AddRoleToRoleAsync(parentRoleId, roleId);
        }
    }
}
