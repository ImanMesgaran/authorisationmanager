//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DevelopmentInProgress.AuthorisationManager.WCFClient.AuthorisationManagerServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AuthorisationManagerServiceReference.IAuthorisationManagerService")]
    public interface IAuthorisationManagerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerService/GetAuthorisation", ReplyAction="http://tempuri.org/IAuthorisationManagerService/GetAuthorisationResponse")]
        string GetAuthorisation();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerService/GetAuthorisation", ReplyAction="http://tempuri.org/IAuthorisationManagerService/GetAuthorisationResponse")]
        System.Threading.Tasks.Task<string> GetAuthorisationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerService/SaveActivity", ReplyAction="http://tempuri.org/IAuthorisationManagerService/SaveActivityResponse")]
        string SaveActivity(string activity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerService/SaveActivity", ReplyAction="http://tempuri.org/IAuthorisationManagerService/SaveActivityResponse")]
        System.Threading.Tasks.Task<string> SaveActivityAsync(string activity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerService/SaveRole", ReplyAction="http://tempuri.org/IAuthorisationManagerService/SaveRoleResponse")]
        string SaveRole(string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerService/SaveRole", ReplyAction="http://tempuri.org/IAuthorisationManagerService/SaveRoleResponse")]
        System.Threading.Tasks.Task<string> SaveRoleAsync(string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerService/SaveUserAuthorisation", ReplyAction="http://tempuri.org/IAuthorisationManagerService/SaveUserAuthorisationResponse")]
        string SaveUserAuthorisation(string userAuthorisation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerService/SaveUserAuthorisation", ReplyAction="http://tempuri.org/IAuthorisationManagerService/SaveUserAuthorisationResponse")]
        System.Threading.Tasks.Task<string> SaveUserAuthorisationAsync(string userAuthorisation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerService/DeleteActivity", ReplyAction="http://tempuri.org/IAuthorisationManagerService/DeleteActivityResponse")]
        string DeleteActivity(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerService/DeleteActivity", ReplyAction="http://tempuri.org/IAuthorisationManagerService/DeleteActivityResponse")]
        System.Threading.Tasks.Task<string> DeleteActivityAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerService/DeleteRole", ReplyAction="http://tempuri.org/IAuthorisationManagerService/DeleteRoleResponse")]
        string DeleteRole(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerService/DeleteRole", ReplyAction="http://tempuri.org/IAuthorisationManagerService/DeleteRoleResponse")]
        System.Threading.Tasks.Task<string> DeleteRoleAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerService/DeleteUserAuthorisation", ReplyAction="http://tempuri.org/IAuthorisationManagerService/DeleteUserAuthorisationResponse")]
        string DeleteUserAuthorisation(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerService/DeleteUserAuthorisation", ReplyAction="http://tempuri.org/IAuthorisationManagerService/DeleteUserAuthorisationResponse")]
        System.Threading.Tasks.Task<string> DeleteUserAuthorisationAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerService/RemoveActivityFromActivity", ReplyAction="http://tempuri.org/IAuthorisationManagerService/RemoveActivityFromActivityRespons" +
            "e")]
        string RemoveActivityFromActivity(string activityId, string parentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerService/RemoveActivityFromActivity", ReplyAction="http://tempuri.org/IAuthorisationManagerService/RemoveActivityFromActivityRespons" +
            "e")]
        System.Threading.Tasks.Task<string> RemoveActivityFromActivityAsync(string activityId, string parentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerService/RemoveActivityFromRole", ReplyAction="http://tempuri.org/IAuthorisationManagerService/RemoveActivityFromRoleResponse")]
        string RemoveActivityFromRole(string activityId, string roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerService/RemoveActivityFromRole", ReplyAction="http://tempuri.org/IAuthorisationManagerService/RemoveActivityFromRoleResponse")]
        System.Threading.Tasks.Task<string> RemoveActivityFromRoleAsync(string activityId, string roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerService/RemoveRoleFromRole", ReplyAction="http://tempuri.org/IAuthorisationManagerService/RemoveRoleFromRoleResponse")]
        string RemoveRoleFromRole(string roleId, string parentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerService/RemoveRoleFromRole", ReplyAction="http://tempuri.org/IAuthorisationManagerService/RemoveRoleFromRoleResponse")]
        System.Threading.Tasks.Task<string> RemoveRoleFromRoleAsync(string roleId, string parentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerService/RemoveRoleFromUser", ReplyAction="http://tempuri.org/IAuthorisationManagerService/RemoveRoleFromUserResponse")]
        string RemoveRoleFromUser(string roleId, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerService/RemoveRoleFromUser", ReplyAction="http://tempuri.org/IAuthorisationManagerService/RemoveRoleFromUserResponse")]
        System.Threading.Tasks.Task<string> RemoveRoleFromUserAsync(string roleId, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerService/AddActivityToRole", ReplyAction="http://tempuri.org/IAuthorisationManagerService/AddActivityToRoleResponse")]
        string AddActivityToRole(string roleId, string activityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerService/AddActivityToRole", ReplyAction="http://tempuri.org/IAuthorisationManagerService/AddActivityToRoleResponse")]
        System.Threading.Tasks.Task<string> AddActivityToRoleAsync(string roleId, string activityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerService/AddActivityToActivity", ReplyAction="http://tempuri.org/IAuthorisationManagerService/AddActivityToActivityResponse")]
        string AddActivityToActivity(string parentActivityId, string activityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerService/AddActivityToActivity", ReplyAction="http://tempuri.org/IAuthorisationManagerService/AddActivityToActivityResponse")]
        System.Threading.Tasks.Task<string> AddActivityToActivityAsync(string parentActivityId, string activityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerService/AddRoleToUser", ReplyAction="http://tempuri.org/IAuthorisationManagerService/AddRoleToUserResponse")]
        string AddRoleToUser(string userId, string roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerService/AddRoleToUser", ReplyAction="http://tempuri.org/IAuthorisationManagerService/AddRoleToUserResponse")]
        System.Threading.Tasks.Task<string> AddRoleToUserAsync(string userId, string roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerService/AddRoleToRole", ReplyAction="http://tempuri.org/IAuthorisationManagerService/AddRoleToRoleResponse")]
        string AddRoleToRole(string parentRoleId, string roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorisationManagerService/AddRoleToRole", ReplyAction="http://tempuri.org/IAuthorisationManagerService/AddRoleToRoleResponse")]
        System.Threading.Tasks.Task<string> AddRoleToRoleAsync(string parentRoleId, string roleId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuthorisationManagerServiceChannel : DevelopmentInProgress.AuthorisationManager.WCFClient.AuthorisationManagerServiceReference.IAuthorisationManagerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthorisationManagerServiceClient : System.ServiceModel.ClientBase<DevelopmentInProgress.AuthorisationManager.WCFClient.AuthorisationManagerServiceReference.IAuthorisationManagerService>, DevelopmentInProgress.AuthorisationManager.WCFClient.AuthorisationManagerServiceReference.IAuthorisationManagerService {
        
        public AuthorisationManagerServiceClient() {
        }
        
        public AuthorisationManagerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuthorisationManagerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthorisationManagerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthorisationManagerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetAuthorisation() {
            return base.Channel.GetAuthorisation();
        }
        
        public System.Threading.Tasks.Task<string> GetAuthorisationAsync() {
            return base.Channel.GetAuthorisationAsync();
        }
        
        public string SaveActivity(string activity) {
            return base.Channel.SaveActivity(activity);
        }
        
        public System.Threading.Tasks.Task<string> SaveActivityAsync(string activity) {
            return base.Channel.SaveActivityAsync(activity);
        }
        
        public string SaveRole(string role) {
            return base.Channel.SaveRole(role);
        }
        
        public System.Threading.Tasks.Task<string> SaveRoleAsync(string role) {
            return base.Channel.SaveRoleAsync(role);
        }
        
        public string SaveUserAuthorisation(string userAuthorisation) {
            return base.Channel.SaveUserAuthorisation(userAuthorisation);
        }
        
        public System.Threading.Tasks.Task<string> SaveUserAuthorisationAsync(string userAuthorisation) {
            return base.Channel.SaveUserAuthorisationAsync(userAuthorisation);
        }
        
        public string DeleteActivity(string id) {
            return base.Channel.DeleteActivity(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteActivityAsync(string id) {
            return base.Channel.DeleteActivityAsync(id);
        }
        
        public string DeleteRole(string id) {
            return base.Channel.DeleteRole(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteRoleAsync(string id) {
            return base.Channel.DeleteRoleAsync(id);
        }
        
        public string DeleteUserAuthorisation(string id) {
            return base.Channel.DeleteUserAuthorisation(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteUserAuthorisationAsync(string id) {
            return base.Channel.DeleteUserAuthorisationAsync(id);
        }
        
        public string RemoveActivityFromActivity(string activityId, string parentId) {
            return base.Channel.RemoveActivityFromActivity(activityId, parentId);
        }
        
        public System.Threading.Tasks.Task<string> RemoveActivityFromActivityAsync(string activityId, string parentId) {
            return base.Channel.RemoveActivityFromActivityAsync(activityId, parentId);
        }
        
        public string RemoveActivityFromRole(string activityId, string roleId) {
            return base.Channel.RemoveActivityFromRole(activityId, roleId);
        }
        
        public System.Threading.Tasks.Task<string> RemoveActivityFromRoleAsync(string activityId, string roleId) {
            return base.Channel.RemoveActivityFromRoleAsync(activityId, roleId);
        }
        
        public string RemoveRoleFromRole(string roleId, string parentId) {
            return base.Channel.RemoveRoleFromRole(roleId, parentId);
        }
        
        public System.Threading.Tasks.Task<string> RemoveRoleFromRoleAsync(string roleId, string parentId) {
            return base.Channel.RemoveRoleFromRoleAsync(roleId, parentId);
        }
        
        public string RemoveRoleFromUser(string roleId, string userId) {
            return base.Channel.RemoveRoleFromUser(roleId, userId);
        }
        
        public System.Threading.Tasks.Task<string> RemoveRoleFromUserAsync(string roleId, string userId) {
            return base.Channel.RemoveRoleFromUserAsync(roleId, userId);
        }
        
        public string AddActivityToRole(string roleId, string activityId) {
            return base.Channel.AddActivityToRole(roleId, activityId);
        }
        
        public System.Threading.Tasks.Task<string> AddActivityToRoleAsync(string roleId, string activityId) {
            return base.Channel.AddActivityToRoleAsync(roleId, activityId);
        }
        
        public string AddActivityToActivity(string parentActivityId, string activityId) {
            return base.Channel.AddActivityToActivity(parentActivityId, activityId);
        }
        
        public System.Threading.Tasks.Task<string> AddActivityToActivityAsync(string parentActivityId, string activityId) {
            return base.Channel.AddActivityToActivityAsync(parentActivityId, activityId);
        }
        
        public string AddRoleToUser(string userId, string roleId) {
            return base.Channel.AddRoleToUser(userId, roleId);
        }
        
        public System.Threading.Tasks.Task<string> AddRoleToUserAsync(string userId, string roleId) {
            return base.Channel.AddRoleToUserAsync(userId, roleId);
        }
        
        public string AddRoleToRole(string parentRoleId, string roleId) {
            return base.Channel.AddRoleToRole(parentRoleId, roleId);
        }
        
        public System.Threading.Tasks.Task<string> AddRoleToRoleAsync(string parentRoleId, string roleId) {
            return base.Channel.AddRoleToRoleAsync(parentRoleId, roleId);
        }
    }
}
